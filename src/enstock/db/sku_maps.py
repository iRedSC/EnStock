# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.30.0
# source: sku_maps.sql
import dataclasses
from typing import Any, AsyncIterator, Iterator

import sqlalchemy
import sqlalchemy.ext.asyncio

from enstock.db import models


GET_SKU_MAP_BY_SUPPLIER = """-- name: get_sku_map_by_supplier \\:many
SELECT spn, sku FROM sku_maps WHERE supplier = ?
"""


@dataclasses.dataclass()
class GetSkuMapBySupplierRow:
    spn: Any
    sku: Any


INSERT_SKU_MAP = """-- name: insert_sku_map \\:exec
INSERT INTO sku_maps (supplier, spn, sku)
VALUES (?, ?, ?)
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def get_sku_map_by_supplier(self, *, supplier: Any) -> Iterator[GetSkuMapBySupplierRow]:
        result = self._conn.execute(sqlalchemy.text(GET_SKU_MAP_BY_SUPPLIER), {"p1": supplier})
        for row in result:
            yield GetSkuMapBySupplierRow(
                spn=row[0],
                sku=row[1],
            )

    def insert_sku_map(self, *, supplier: Any, spn: Any, sku: Any) -> None:
        self._conn.execute(sqlalchemy.text(INSERT_SKU_MAP), {"p1": supplier, "p2": spn, "p3": sku})


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def get_sku_map_by_supplier(self, *, supplier: Any) -> AsyncIterator[GetSkuMapBySupplierRow]:
        result = await self._conn.stream(sqlalchemy.text(GET_SKU_MAP_BY_SUPPLIER), {"p1": supplier})
        async for row in result:
            yield GetSkuMapBySupplierRow(
                spn=row[0],
                sku=row[1],
            )

    async def insert_sku_map(self, *, supplier: Any, spn: Any, sku: Any) -> None:
        await self._conn.execute(sqlalchemy.text(INSERT_SKU_MAP), {"p1": supplier, "p2": spn, "p3": sku})
