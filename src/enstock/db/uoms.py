# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.30.0
# source: uoms.sql
from typing import Any, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from enstock.db import models


GET_UOM_AMOUNT = """-- name: get_uom_amount \\:one
SELECT amount FROM uoms
WHERE supplier = ? AND sku = ? AND unit = ?
"""


INSERT_UOM = """-- name: insert_uom \\:exec
INSERT INTO uoms (supplier, sku, unit, amount)
VALUES (?, ?, ?, ?)
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def get_uom_amount(self, *, supplier: Any, sku: Any, unit: Any) -> Optional[Any]:
        row = self._conn.execute(sqlalchemy.text(GET_UOM_AMOUNT), {"p1": supplier, "p2": sku, "p3": unit}).first()
        if row is None:
            return None
        return row[0]

    def insert_uom(self, *, supplier: Any, sku: Any, unit: Any, amount: Any) -> None:
        self._conn.execute(sqlalchemy.text(INSERT_UOM), {
            "p1": supplier,
            "p2": sku,
            "p3": unit,
            "p4": amount,
        })


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def get_uom_amount(self, *, supplier: Any, sku: Any, unit: Any) -> Optional[Any]:
        row = (await self._conn.execute(sqlalchemy.text(GET_UOM_AMOUNT), {"p1": supplier, "p2": sku, "p3": unit})).first()
        if row is None:
            return None
        return row[0]

    async def insert_uom(self, *, supplier: Any, sku: Any, unit: Any, amount: Any) -> None:
        await self._conn.execute(sqlalchemy.text(INSERT_UOM), {
            "p1": supplier,
            "p2": sku,
            "p3": unit,
            "p4": amount,
        })
